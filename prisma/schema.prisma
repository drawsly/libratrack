generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.VarChar(50)
  surname       String?   @db.VarChar(50)
  email         String    @unique @db.VarChar(255)
  emailVerified DateTime?
  password      String    @db.VarChar(255)
  image         String?
  loans         loans[]
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model books {
  id           String   @id @default(cuid())
  book_name    String?  @db.VarChar(100)
  author_name  String?  @db.VarChar(50)
  publisher    String?  @db.VarChar(100)
  publish_year Int?
  page_count   Int?
  book_type    String?  @db.VarChar(100)
  book_case    String?  @db.VarChar(50)
  shelf        Int?
  row          Int?
  entrusted    Boolean? @default(false)
  loans        loans[]
}

model loans {
  id          String   @id @default(cuid())
  book_id     String
  reader_id   String
  loan_date   DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  return_date DateTime @db.Date
  books       books    @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_loans_books_id")
  users       User     @relation(fields: [reader_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_loans_users_id")
}

model readers {
  id        String  @id @default(cuid())
  name      String? @db.VarChar(50)
  surname   String? @db.VarChar(50)
  gender    String? @db.Char
  school_no Int?
  phone     String? @db.VarChar(20)
  adress    String?
}
